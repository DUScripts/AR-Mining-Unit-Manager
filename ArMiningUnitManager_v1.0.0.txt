{"slots":{"0":{"name":"Slot_10","type":{"events":[],"methods":[]}},"1":{"name":"Slot_9","type":{"events":[],"methods":[]}},"2":{"name":"Slot_8","type":{"events":[],"methods":[]}},"3":{"name":"Slot_7","type":{"events":[],"methods":[]}},"4":{"name":"Slot_6","type":{"events":[],"methods":[]}},"5":{"name":"Slot_5","type":{"events":[],"methods":[]}},"6":{"name":"Slot_4","type":{"events":[],"methods":[]}},"7":{"name":"Slot_3","type":{"events":[],"methods":[]}},"8":{"name":"Slot_2","type":{"events":[],"methods":[]}},"9":{"name":"Slot_1","type":{"events":[],"methods":[]}},"-1":{"name":"unit","type":{"events":[],"methods":[]}},"-3":{"name":"player","type":{"events":[],"methods":[]}},"-2":{"name":"construct","type":{"events":[],"methods":[]}},"-4":{"name":"system","type":{"events":[],"methods":[]}},"-5":{"name":"library","type":{"events":[],"methods":[]}}},"handlers":[{"code":"init = false\n\n-- Exports\nMode = 2 --export\nUse24HourClock = false --export\nTimeAdjustMinutes = 0 --export\nEmitterChannel = 'UNITCH' --export\ncalibrationOffeset = 0 --export\n\nWidgetOffsetX = 0 --export\nWidgetOffsetY = 0 --export\nWidgetOffsetZ = 2.5 --export\nStickerOffsetX = 0 --export\nStickerOffsetY = 0 --export\nStickerOffsetZ = 12.5 --export\n\nReqCalbLvl = 50\nReqCalbLv2 = 50\nReqCalbLv3 = 50\nReqCalbLv4 = 50\nReqCalbLv5 = 50\n\nArState = Mode\nStateLevel = 1\nDrawState = 1\n\n-- System\nTick = 0\nEnableAR = true\nContent = ''\nScreenHeight = system.getScreenHeight()\nScreenWidth = system.getScreenWidth()\n\n-- Data Objects\nMiningUnits = {}\nScreens = {}\nDatabanks = {}\nEmitters = {}\nCores = {}\n\n-- Slot Objects\nMiningUnitSlots = {}\nScreenSlots = {}\nDatabankSlots = {}\nEmitterSlots = {}\nCoreSlots = {}\n\n-- Slot Object Counts\nMiningUnitCount = 0\nScreenCount = 0\nDatabankCount = 0\nEmitterCount = 0\nCoreCount = 0\n\n-- Slot Objects Found\nMiningUnitFound = false\nScreenFound = false\nDatabankFound = false\nEmitterFound = false\nCoreFound = false\n\n-- Stickers\nStickers = {}\n\nConstructPos = construct.getWorldPosition()\nConstructRight = construct.getWorldRight()\nConstructForward = construct.getWorldForward()\nConstructUp = construct.getWorldUp()\nLastPlayerPos = vec3(player.getWorldPosition())\nLastCameraForward = vec3(system.getCameraWorldForward())\nLastCameraRight = vec3(system.getCameraWorldRight())\nLastCameraUp = vec3(system.getCameraWorldUp())\n\nUpdateDataIndex = 1\nSendDataIndex = 1\nDoReset = true\nPauseDraw = false\nShowWarning = true\n\n--\nWarning = ''\n\nfor slot_name, slot in pairs(unit) do\n    if type(slot) == \"table\" and type(slot.export) == \"table\" and slot.getClass then\n        local slotClass = slot.getClass():lower()\n        \n        if slotClass == 'miningunit' then\n            MiningUnitFound = true\n            MiningUnitCount = MiningUnitCount + 1\n            MiningUnitSlots[#MiningUnitSlots+1] = slot\n        elseif slotClass == 'screenunit' then\n            ScreenFound = true\n            ScreenCount = ScreenCount + 1\n            ScreenSlots[#ScreenSlots+1] = slot\n        elseif slotClass == 'coreunitstatic' or slotClass == 'coreunitdynamic' or slotClass == 'coreunitspace' then\n            CoreFound = true\n            CoreCount = CoreCount + 1\n            CoreSlots[#CoreSlots+1] = slot\n        elseif slotClass == 'databankunit' then\n            DatabankFound = true\n            DatabankCount = DatabankCount + 1\n            DatabankSlots[#DatabankSlots+1] = slot\n        elseif slotClass == 'emitterunit' then\n            EmitterFound = true\n            EmitterCount = EmitterCount + 1\n            EmitterSlots[#EmitterSlots+1] = slot\n        elseif slotClass == 'generic' then\n            -- Do nothing\n        else\n            system.print('Element ['..slot.getName()..'] of type ['..slot.getClass()..'] is not supported')\n        end\n    end\nend\n\nunit.setTimer('UpdateData', 0.05)\nunit.setTimer('Ar', 0.0025)","filter":{"args":[],"signature":"onStart()","slotKey":"-1"},"key":"0"},{"code":"if not init then\n    for k, v in pairs(CoreSlots) do\n        Cores[#Cores+1] = BuildCores(v)\n    end\n    \n    for k, v in pairs(MiningUnitSlots) do\n        MiningUnits[#MiningUnits+1] = BuildMiningUnit(v)\n        DrawMiningUnitCalibrationSticker(MiningUnits[#MiningUnits], 0)\n    end\n    \n    for k, v in pairs(ScreenSlots) do\n        Screens[#Screens+1] = BuildScreen(v)\n        --Screens[#Screens]._this.setRenderScript(GetScreenScript())\n    end\n    \n    for k, v in pairs(DatabankSlots) do\n        Databanks[#Databanks+1] = BuildDatabank(v)\n    end\n    \n    for k, v in pairs(EmitterSlots) do\n        Emitters[#Emitters+1] = BuildEmitter(v)\n    end\n   \n    unit.setTimer('SendData', 0.05)\n    init = true\nelse\n    if MiningUnitCount > 0 then\n        UpdateMiningUnit(MiningUnits[UpdateDataIndex])  \n    end\n    \n    UpdateDataIndex = UpdateDataIndex + 1\n        \n    if UpdateDataIndex > MiningUnitCount then\n        UpdateDataIndex = 1\n        DrawState = StateLevel\n        StateLevel = 1\n    end\n    \n    if HasPlayerWorldMoved() then\n       Draw(false)\n       PauseDraw = false\n    else\n       if not PauseDraw or ShowWarning then \n           Draw(true)\n       end\n       PauseDraw = true\n    end\nend\n\n","filter":{"args":[{"value":"UpdateData"}],"signature":"onTimer(tag)","slotKey":"-1"},"key":"1"},{"code":"if DoReset then\n    SendReset()\n    DoReset = false\nelse\n   if MiningUnitCount > 0 then\n       SendMiningUnitData(SendDataIndex, MiningUnits[SendDataIndex])\n       SendDataIndex = SendDataIndex + 1\n\n       if SendDataIndex > MiningUnitCount then\n          SendDataIndex = 1\n       end\n    end \nend\n--StateLevel = 1","filter":{"args":[{"value":"SendData"}],"signature":"onTimer(tag)","slotKey":"-1"},"key":"2"},{"code":"SendReset()","filter":{"args":[],"signature":"onStop()","slotKey":"-1"},"key":"3"},{"code":"if init then\n    if HasPlayerWorldMoved() then\n        Draw(false)\n        PauseDraw = false\n    else\n        if not PauseDraw then \n            Draw(true)\n        end\n        PauseDraw = true\n    end \nend","filter":{"args":[{"value":"Ar"}],"signature":"onTimer(tag)","slotKey":"-1"},"key":"4"},{"code":"DoReset = true","filter":{"args":[{"value":"reset"}],"signature":"onInputText(text)","slotKey":"-4"},"key":"5"},{"code":"Tick = Ternary(Tick > 2000000, 0, Tick + 1)\nUpdateAllUnitStickers()\n--Draw()","filter":{"args":[],"signature":"onUpdate()","slotKey":"-4"},"key":"6"},{"code":"ArStateNext()--EnableAR = not EnableAR\nDraw(EnableAR)","filter":{"args":[{"value":"option1"}],"signature":"onActionStart(action)","slotKey":"-4"},"key":"7"},{"code":"Signs = {}\nSigns[1] = {Text = \"NOMINAL\", X = 725, C1 = \"42,255,42\", C2 = \"84,255,84\"}\nSigns[2] = {Text = \"CAUTION\", X = 712, C1 = \"255,255,42\", C2 = \"255,255,84\"}\nSigns[3] = {Text = \"WARNING\", X = 778, C1 = \"255,42,42\", C2 = \"255,84,112\"}\n\nfunction Ternary(c,x,y) if c then return x else return y end end\nfunction ToSendPositionString(p)return p.x..'|'..p.y..'|'..p.z end \nfunction SendReset() SendData(nil,'RESET', false) end\nfunction BuildScreen(this)return BuildGeneric(this) end\nfunction BuildEmitter(this)return BuildGeneric(this) end\nfunction BuildDatabank(this)return BuildGeneric(this) end\nfunction BuildCores(this)return BuildGeneric(this) end\nfunction SetPageContent(content)return'<svg width=\"100%\" height=\"100%\" style=\"position:absolute;left:0%;top:0%;background-color:rgba(42,255,42,0);\">'..content..'</svg>' end\nfunction AddDefs()return'<defs><clipPath id=\"cca\"><path d=\"M -405 0 H 405 L 305 140 H -305 Z\" fill=\"rgba(255,255,42,.75)\" stroke-width=\"3\" stroke=\"rgba(255,255,84,.75)\"/></clipPath></defs>'end\nfunction CalcDistance(m)return Ternary(math.ceil(m/1000) < 100, math.floor(math.ceil(m/1000)*100)/100 ..'km', math.floor((math.ceil(m/1000)/200)*100)/100 ..'su')end\nfunction GetPerc(x,y)return math.floor((x/y)*100) end\nfunction GetPercNum(x,y)return math.floor((x*y)/100) end\nfunction RadToAngle(rad)return rad * (180/math.pi) end\nfunction ConvertLocalToWorld(a,b,c,d,e)local f={a[1]*c[1],a[1]*c[2],a[1]*c[3]}local g={a[2]*d[1],a[2]*d[2],a[2]*d[3]}local h={a[3]*e[1],a[3]*e[2],a[3]*e[3]}return{f[1]+g[1]+h[1]+b[1],f[2]+g[2]+h[2]+b[2],f[3]+g[3]+h[3]+b[3]}end\nfunction ArStateNext() ArState = Ternary(ArState+1>2,0,ArState+1) end\nfunction CheckCalibration(o,c)return c <  Ternary(o + calibrationOffeset > 100, 100, o + calibrationOffeset) end\nfunction SvgText(x,y,p,b,f,a,t,e)return'<text x=\"'..x..'\" y=\"'..y..'\" font-size=\"'..p..'px\" font-weight=\"'..b..'\" fill=\"rgba('..f..')\" text-anchor=\"'..a..'\" '..e..'>'..t..'</text>'end\nfunction SvgCircle(x,y,r,f)return'<circle cx=\"'..x..'\" cy=\"'..y..'\" r=\"'..r..'\" fill=\"rgba('..f..')\" />'end\nfunction DrawKeyValuePair(x,y,w,k,v)return'<text x=\"'..(x+5)..'\" y=\"'..y..'\" font-size=\"15px\" font-weight=\"bold\" fill=\"rgba(255,255,255,0.5)\" text-anchor=\"start\">'..k..'</text><text x=\"'..(x + w - 5) ..'\" y=\"'..y..'\" font-size=\"15px\" font-weight=\"bold\" fill=\"rgba(255,255,255,0.5)\" text-anchor=\"end\">'..v..'</text>'end\nfunction SvgLine(x1,x2,y1,y2,c,sw)return'<line x1=\"'..x1..'\" y1=\"'..y1..'\" x2=\"'..x2..'\" y2=\"'..y2..'\" stroke=\"rgba('..c..')\" stroke-width=\"'..sw..'\"/>'end\nfunction SvgRect(x,y,w,h,f,rx,s,sw)return'<rect x=\"'..x..'\" y=\"'..y..'\" width=\"'..w..'\" height=\"'..h..'\" style=\"fill:rgba('..f..');\" rx=\"'..rx..'\" stroke=\"rgba('..s..')\" stroke-width=\"'..sw..'\"/>'end\nfunction SvgG(x,y,c,rx,ry,rz)return'<g style=\"transform:translate('..x..'px,'..y..'px) rotateX('..rx..'deg) rotateY('..ry..'deg) rotateZ('..rz..'deg);\">'..c..'</g>'end\n\nfunction Draw(l)\n    system.showScreen(EnableAR)\n    system.setScreen(SetPageContent(GetContent(l)))\nend\n\nfunction PointAroundOrigin(origin,target)\n    local vec2 = target - origin\n    local vec1 = vec3(0,1,0)\n    return math.atan(vec2.y,vec2.x) - math.atan(vec1.y,vec1.x)\nend\n\nfunction Rotate(x,y,a,p)\n    local s = math.sin(a)\n    local c = math.cos(a)\n\n    p.x = p.x - x\n    p.y = p.y - y\n\n    local newx = p.x * c - p.y * s\n    local newy = p.x * s + p.y * c\n\n    p.x = newx + x\n    p.y = newy + y\n    return {x = p.x, y = p.y} \nend\n\nfunction BuildGeneric(this)\n    local generic = {} \n    \n    generic._this = this\n    generic.Name = this.getName()\n    generic.Class = this.getClass()\n    generic.ItemId = this.getItemId()\n    generic.LocalId = this.getLocalId()\n    generic.Integrity = this.getIntegrity()\n    generic.HitPoints = this.getHitPoints()\n    generic.MaxHitPoints = this.getMaxHitPoints()\n    generic.RemainingRestorations = this.getRemainingRestorations()\n    generic.MaxRestorations = this.getMaxRestorations()\n    generic.Position = this.getPosition()\n    return generic\nend\n\nfunction UpdateGeneric(this)\n    local g = {}\n    local hasChanged = false\n    \n    g.Integrity = this._this.getIntegrity()\n    g.HitPoints = this._this.getHitPoints()\n    g.RemainingRestorations = this._this.getRemainingRestorations()\n    \n    hasChanged = AreGenericsEqual(g,this)\n    \n    this.Integrity = g.Integrity\n    this.HitPoints = g.HitPoints\n    this.RemainingRestorations = g.RemainingRestorations\n    \n    return hasChanged\nend\n\nfunction AreGenericsEqual(a,b)\n    local equal = true\n    equal = equal and a.Integrity == b.Integrity\n    equal = equal and a.HitPoints == b.HitPoints\n    return equal\nend\n\nfunction BuildMiningUnit(this)\n    local _unit = BuildGeneric(this)\n    _unit.State = this.getState()\n    _unit.RemainingTime = this.getRemainingTime()\n    _unit.ActiveOre = system.getItem(this.getActiveOre())\n    _unit.OrePools = this.getOrePools()\n    _unit.BaseRate = this.getBaseRate()\n    _unit.Efficiency = this.getEfficiency()\n    _unit.CalibrationRate = this.getCalibrationRate()\n    _unit.OptimalRate = this.getOptimalRate()\n    _unit.ProductionRate = this.getProductionRate()\n    _unit.AdjacencyBonus = this.getAdjacencyBonus()\n    _unit.LastExtractionPosition = this.getLastExtractionPosition()\n    _unit.LastExtractionTime = this.getLastExtractionTime()\n    _unit.LastExtractedOre = this.getLastExtractedOre()\n    _unit.LastExtractedVolume = this.getLastExtractedVolume()\n    _unit.NeedsCalibrated = CheckCalibration(_unit.OptimalRate,_unit.CalibrationRate)\n    _unit.StateLevel = 1\n    return _unit\nend\n\nfunction UpdateMiningUnit(this)\n    local u = {}\n    local hasChanged = false\n    \n    hasChanged = UpdateGeneric(this)\n    \n    u.State = this._this.getState()\n    u.RemainingTime = this._this.getRemainingTime()\n    u.ActiveOre = system.getItem(this._this.getActiveOre())\n    u.OrePools = this._this.getOrePools()\n    u.BaseRate = this._this.getBaseRate()\n    u.Efficiency = this._this.getEfficiency()\n    u.CalibrationRate = this._this.getCalibrationRate()\n    u.OptimalRate = this._this.getOptimalRate()\n    u.ProductionRate = this._this.getProductionRate()\n    u.AdjacencyBonus = this._this.getAdjacencyBonus()\n    u.LastExtractionPosition = this._this.getLastExtractionPosition()\n    u.LastExtractionTime = this._this.getLastExtractionTime()\n    u.LastExtractedOre = this._this.getLastExtractedOre()\n    u.LastExtractedVolume = this._this.getLastExtractedVolume()\n    u.NeedsCalibrated = CheckCalibration(u.OptimalRate,u.CalibrationRate)\n    \n    hasChanged = hasChanged or AreUnitsEqual(this,u)\n    local stateLvl = Ternary(u.State == 2, Ternary(u.NeedsCalibrated, 2, 1), 3)\n    StateLevel = Ternary(StateLevel < stateLvl, stateLvl, StateLevel)\n    \n    this.State = u.State\n    this.RemainingTime = u.RemainingTime\n    this.ActiveOre = u.ActiveOre\n    this.OrePools = u.OrePools\n    this.BaseRate = u.BaseRate\n    this.Efficiency = u.Efficiency\n    this.CalibrationRate = u.CalibrationRate\n    this.OptimalRate = u.OptimalRate\n    this.ProductionRate = u.ProductionRate\n    this.AdjacencyBonus = u.AdjacencyBonus\n    this.LastExtractionPosition = u.LastExtractionPosition\n    this.LastExtractionTime = u.LastExtractionTime\n    this.LastExtractedOre = u.LastExtractedOre\n    this.LastExtractedVolume = u.LastExtractedVolume\n    this.NeedsCalibrated = u.NeedsCalibrated\n    this.StateLevel = stateLvl\n    return hasChanged\nend\n\nfunction AreUnitsEqual(a,b)\n    local equal = true\n    equal = equal and a.State == b.State\n    equal = equal and a.RemainingTime == b.RemainingTime\n    equal = equal and a.ActiveOre == b.ActiveOre\n    equal = equal and a.OrePools == b.OrePools\n    equal = equal and a.BaseRate == b.BaseRate\n    equal = equal and a.Efficiency == b.Efficiency\n    equal = equal and a.CalibrationRate == b.CalibrationRate\n    equal = equal and a.OptimalRate == b.OptimalRate\n    equal = equal and a.ProductionRate == b.ProductionRate\n    equal = equal and a.AdjacencyBonus == b.AdjacencyBonus\n    equal = equal and a.LastExtractionPosition == b.LastExtractionPosition\n    equal = equal and a.LastExtractionTime == b.LastExtractionTime\n    equal = equal and a.LastExtractedOre == b.LastExtractedOre\n    equal = equal and a.LastExtractedVolume == b.LastExtractedVolume\n    return equal\nend\n\nfunction SendData(id, s, changed)\n    if s ~= nil then\n        for k, v in pairs(Screens) do\n            v._this.setScriptInput(s..'~'..GetCurrentTimeString())\n        end\n        if changed then\n            for k, v in pairs(Databanks) do v._this.setStringValue('FTD'..id,s)end\n            for k, v in pairs(Emitters) do v._this.send(EmitterChannel,s)end \n        end\n    end\nend\n\nfunction SendMiningUnitData(id, this)\n    local s = 'U~'..\n    this.LocalId..'~'..\n    string.sub(this.Class,1,1)..'~'..\n    this.Name..'~'..\n    this.State..'~'..\n    math.floor(this.RemainingTime)..'~'..\n    this.ActiveOre.locDisplayName..'~'..\n    this.ActiveOre.tier..'~'..\n    this.ActiveOre.iconPath..'~'..\n    this.BaseRate..'~'..\n    this.Efficiency..'~'..\n    this.CalibrationRate..'~'..\n    this.OptimalRate..'~'..\n    this.ProductionRate..'~'..\n    this.AdjacencyBonus..'~'..\n    ToSendPositionString(vec3(this.LastExtractionPosition))..'~'..\n    this.LastExtractionTime..'~'..\n    this.LastExtractedOre..'~'..\n    this.LastExtractedVolume..'~'..\n    this.Integrity..'~'..\n    this.HitPoints..'~'..\n    this.MaxHitPoints..'~'..\n    this.RemainingRestorations..'~'..\n    this.MaxRestorations\n    SendData(id,s)\nend\n\nfunction GetCurrentTimeString(time)\n    local allseconds = math.floor(time + (TimeAdjustMinutes * 60))\n    local daySeconds = math.floor(allseconds % 86400)\n    local dayPassed = math.floor(allseconds / 86400)\n    local hoursPassed = math.floor(daySeconds / 3600)\n    local minutesPassed = math.floor((daySeconds % 3600) / 60)\n    local secondsPassed = math.floor((daySeconds % 3600) % 60)\n    return string.format(\"%03d\",dayPassed)..':'..string.format(\"%02d\",hoursPassed)..':'..string.format(\"%02d\",minutesPassed)..\":\".. string.format(\"%02d\",secondsPassed)\nend\n\nfunction GetDaysPast(time)\n   local allseconds = math.floor(time)\n   local daySeconds = math.floor(allseconds / 86400)\n   return daySeconds\nend\n\nfunction DrawElementNumberSticker(n, pos, rot)\n    local id = CoreSlots[#CoreSlots].spawnNumberSticker(n, pos.x  + StickerOffsetX, pos.y + StickerOffsetY, pos.z + StickerOffsetZ, 'front')\n    CoreSlots[#CoreSlots].rotateSticker(id, rot.x, rot.y, rot.z)\n    return id\nend\n\nfunction DrawElementArrowSticker(pos, rot)\n    local id = CoreSlots[#CoreSlots].spawnArrowSticker(pos.x + StickerOffsetX, pos.y + StickerOffsetY, pos.z + StickerOffsetZ, 'down')\n    CoreSlots[#CoreSlots].rotateSticker(id, rot.x, rot.y, rot.z)\n    return id\nend\n\nfunction UpdateSticker(id, pos, rot)\n    CoreSlots[#CoreSlots].moveSticker(id, pos.x + StickerOffsetX, pos.y + StickerOffsetY, pos.z + StickerOffsetZ)\n    CoreSlots[#CoreSlots].rotateSticker(id, rot.x, rot.y, rot.z)\nend\n\nfunction DrawMiningUnitCalibrationSticker(unit, n)\n    local cen = vec3(unit._this.getPosition())\n    local box = vec3(unit._this.getBoundingBoxSize())\n    local pos = {x = cen.x, y = cen.y, z = cen.z + math.ceil(18/2)}\n    local play = vec3(player.getPosition())\n    local rot = vec3(0, 0, RadToAngle(PointAroundOrigin(pos, play)))\n    local calS = GetDaysPast(unit.LastExtractionTime)..''\n    \n    unit.Stickers = {}\n    \n    if unit.NeedsCalibrated then\n        unit.Stickers[#unit.Stickers+1] = DrawElementArrowSticker(pos, rot)\n    else\n        unit.Stickers[#unit.Stickers+1] = -1\n    end\n        \n    for i = 1, #calS, 1 do\n        local char = string.sub(calS, 1, i)\n        unit.Stickers[#unit.Stickers+1] = DrawElementNumberSticker(tonumber(char), pos, rot)\n    end\nend\n\nfunction UpdateUnitStickers(unit, play)\n    local cen = vec3(unit._this.getPosition())\n    local box = vec3(unit._this.getBoundingBoxSize())\n    local pos = {x = cen.x, y = cen.y, z = cen.z}\n    local pao = PointAroundOrigin(pos, play)\n    local rot = vec3(0, 0, RadToAngle(pao))\n    \n    for k,v in pairs(unit.Stickers) do\n        local adjpos = Rotate(pos.x, pos.y, pao, {x = pos.x, y = pos.y})\n        UpdateSticker(v, vec3(adjpos.x, adjpos.y, pos.z + ((#unit.Stickers - k) * 1)), rot)\n        \n        if unit.NeedsCalibrated and k == 1 and v == -1 then\n            unit.Stickers[#unit.Stickers+1] = DrawElementArrowSticker(pos, rot)\n        elseif not unit.NeedsCalibrated then\n            if k == 1 and v ~= -1 then\n                CoreSlots[#CoreSlots].deleteSticker(v)\n            end\n            \n            if k == 2 and v ~= -1 then\n                local calS = GetDaysPast(unit.LastExtractionTime)..''\n                local char = string.sub(calS, 1, i)\n                CoreSlots[#CoreSlots].deleteSticker(v)\n                unit.Stickers[k] = DrawElementNumberSticker(tonumber(char), pos, rot)\n            end\n        end\n    end\nend\n\nfunction UpdateAllUnitStickers()\n    for k,v in pairs(MiningUnits) do\n        UpdateUnitStickers(v, vec3(player.getPosition()))\n    end\nend\n\nfunction GetContent(last)\n    local c = ''\n    local d = ' &#x2022; '\n\n    c = c .. AddDefs()\n    for k,v in pairs(MiningUnits) do c = c .. PlaceHubObject(v, last) end\n    local s = Signs[DrawState].Text\n    c = c .. DrawWarning(d..s..d..s..d..s..d..s..d..s..d..s..d..s..d)\n    return c\nend\n\nfunction PlaceHubObject(object, showImg)\n    local c = ''\n    if MiningUnits[1] ~= nil then\n        local id = Cores[#Cores]._this.getLocalId()\n        local elementPos = object._this.getPosition()\n        elementPos[1] = elementPos[1] + WidgetOffsetX\n        elementPos[2] = elementPos[2] + WidgetOffsetY\n        elementPos[3] = elementPos[3] + WidgetOffsetZ\n        local screenpos = library.getPointOnScreen(ConvertLocalToWorld(elementPos, ConstructPos, ConstructRight, ConstructForward, ConstructUp))\n        \n        if ArState ~= 0 then\n            local isOnScreen = (math.abs(screenpos[1]) < 1) and (math.abs(screenpos[2]) < 1) and (math.abs(screenpos[1]) > 0) and (math.abs(screenpos[2]) > 0) \n            if isOnScreen then\n                if ArState == 1 then\n                elseif ArState == 2 then\n                    local w = 121\n                    local h = 86\n                    \n                    c = c .. [[<path d=\"\n                    M 0 0\n                    H 44\n                    L 54 14\n                    H 113\n                    V 92\n                    L 121 99\n                    V 146\n                    H 30 \n                    L 0 116\n                    Z\" fill=\"rgba(126,126,126,.75)\" stroke-width=\"3\" stroke=\"rgba(255,255,84,.75)\"/>]]\n                    \n                    c = c .. [[<path d=\"\n                    M 50 -5 \n                    H 121\n                    V 10\n                    H 57\n                    L 50 0\n                    Z\" fill=\"rgba(255,255,42,.75)\" stroke-width=\"3\" stroke=\"rgba(255,255,84,.75)\"/>]]\n                    \n                    c = c .. [[<path d=\"\n                    M 115 14 \n                    H 129\n                    V 91\n                    L 122 99\n                    L 114 91\n                    Z\" fill=\"rgba(42,42,42,1)\" stroke-width=\"2\" stroke=\"rgba(21,21,21,1)\"/>]]\n                    \n                    c = c .. [[<path d=\"\n                    M 115 14 \n                    H 129\n                    V 91\n                    L 122 99\n                    L 114 91\n                    Z\" fill=\"rgba(42,42,42,1)\" stroke-width=\"2\" stroke=\"rgba(21,21,21,1)\"/>]]\n                    \n                    c = c .. [[<path d=\"\n                    M 96,141\n                    H 104\n                    L 109 151\n                    H 91\n                    Z\" fill=\"rgba(]]..Ternary(object.StateLevel == 2,'255,255,42,1',Ternary(object.StateLevel == 1,'42,255,42,1','255,42,42,1'))..[[)\" stroke-width=\"2\" stroke=\"rgba(0,0,0,1)\"/>]]\n                    \n                    c = c .. SvgRect(5,-5,8,13,Ternary(object.StateLevel == 1,'42,255,42,1','42,84,42,1'),3,'0,0,0,1',1)\n                    c = c .. SvgRect(17,-5,8,13,Ternary(object.StateLevel == 2,'255,255,42,1','84,84,42,1'),3,'0,0,0,1',1)\n                    c = c .. SvgRect(29,-5,8,13,Ternary(object.StateLevel == 3,'255,42,42,1','84,42,42,1'),3,'0,0,0,1',1)\n                    c = c .. SvgRect(80,-4,40,12,'42,42,42,1',0,'0,0,0,0',0)\n                    c = c .. SvgText(5,30,15,'bold','42,42,42,1','start','Calibration','')\n                    c = c .. SvgText(5,65,40,'bold','21,21,21,1','start',utils.round(object.CalibrationRate * 100)..'%','')\n                    c = c .. SvgText(5,75,9,'bold','21,21,21,1','start','Optimal','')\n                    c = c .. SvgText(w-10,75,9,'bold','21,21,21,1','end',utils.round(object.OptimalRate * 100)..'%','')\n                    c = c .. SvgText(w-5,06,9,'bold','225,225,225,1','end',utils.round(object.ProductionRate)..'L/h','')\n                    c = c .. SvgRect(10,80,101,30,'42,42,42,1',0,'0,0,0,0',0)\n                    c = c .. SvgText(27,90,7,'bold','255,255,42,1','middle','DAY','')\n                    c = c .. SvgText(55,90,7,'bold','255,255,42,1','middle','HR','')\n                    c = c .. SvgText(76,90,7,'bold','255,255,42,1','middle','MIN','')\n                    c = c .. SvgText(98,90,7,'bold','255,255,42,1','middle','SEC','')\n                    c = c .. SvgText(58,7,12,'bold','21,21,21,1','start','T'..object.ActiveOre.tier,'')\n                    c = c .. SvgText(61,106,16,'bold','225,225,225,1','middle',GetCurrentTimeString(object.LastExtractionTime),'')\n                    c = c .. SvgLine(40,111,125,125,'84,84,84,1',3)\n                    c = c .. SvgLine(40,40 + GetPercNum(GetPerc(3600-object.RemainingTime,3600),71),125,125,'42,42,42,1',5)\n                    c = c .. SvgText(18,-118,10,'bold','255,255,42,1','start',object.ActiveOre.locDisplayName,'transform=\"rotate(90)\"')\n                end\n\n                if showImg or true then\n                    c = c .. '<image xlink:href=\"/'..object.ActiveOre.iconPath..'\" x=\"-31\" y=\"-75\" height=\"62\" width=\"62\" />'\n                end\n                c = SvgG(GetPercNum(utils.round(screenpos[1]*10000)*0.01,ScreenWidth),GetPercNum(utils.round(screenpos[2]*10000)*0.01,ScreenHeight),c,0,0,0)\n            else\n\n            end\n        end\n    end     \n    return c\nend\n\nfunction AreVec3Equal(v1, v2)\n    local result = true\n    result = result and math.floor(v1.x*100) == math.floor(v2.x*100)\n    result = result and math.floor(v1.y*100) == math.floor(v2.y*100)\n    result = result and math.floor(v1.z*100) == math.floor(v2.z*100)\n    return result\nend\n\nfunction HasPlayerWorldMoved()\n    local playerPos = vec3(player.getWorldPosition())\n    local cameraForward = vec3(system.getCameraWorldForward())\n    local cameraRight = vec3(system.getCameraWorldRight())\n    local cameraUp = vec3(system.getCameraWorldUp())\n    local result = true\n    \n    result = result and AreVec3Equal(LastPlayerPos, playerPos)\n    result = result and AreVec3Equal(LastCameraForward, cameraForward)\n    result = result and AreVec3Equal(LastCameraRight, cameraRight)\n    result = result and AreVec3Equal(LastCameraUp, cameraUp)\n    \n    LastPlayerPos = playerPos\n    LastCameraForward = cameraForward\n    LastCameraRight = cameraRight\n    LastCameraUp = cameraUp\n    return not result\nend\n\nfunction DrawWarning(c)\n    local x1 = 0\n    local x2 = 35\n    local y1 = 0\n    local y2 = 40\n    local t = 40\n    local tck = Tick % 840\n    local tck2 = Tick % Signs[DrawState].X\n    local w = 490\n    local s = '<g style=\"transform: translate('..math.floor(ScreenWidth/2)..'px,'..50 ..'px) rotateX(0deg)\">'\n    for i = 0,13,1 do\n       local o = 70 * i\n       local r = 0\n       if x1+o+t-w-tck < -w then r = w*2 end\n       s = s .. '<polygon points=\"'..x1+o+t-w-tck+r ..','..y1..' '..x2+o+t-w-tck+r ..','..y1..' '..x2+o-t-w-tck+r ..','..y2..' '..x1+o-t-w-tck+r ..','..y2..'\" fill=\"rgba('..Signs[DrawState].C2..',.75)\" stroke=\"rgba('..Signs[DrawState].C1..',.75)\" stroke-width=\"3\" clip-path=\"url(#cca)\" />' \n       s = s .. '<polygon points=\"'..x1+o+t-w-tck+r ..','..y2+100 ..' '..x2+o+t-w-tck+r ..','..y2+100 ..' '..x2+o-t-w-tck+r ..','..y1+100 ..' '..x1+o-t-w-tck+r ..','..y1+100 ..'\" fill=\"rgba('..Signs[DrawState].C2..',.75)\" stroke=\"rgba('..Signs[DrawState].C1..',.75)\" stroke-width=\"3\" clip-path=\"url(#cca)\" />'\n    end\n    s = s .. '<text x=\"'..x1+t-w+tck2+100 ..'\" y=\"85\" font-size=\"45px\" font-weight=\"bold\" fill=\"rgba(255,255,255,.75)\" text-anchor=\"middle\" clip-path=\"url(#cca)\">'..c..'</text>'\n    s = s .. '</g>' \n    return s\nend","filter":{"args":[],"signature":"onStart()","slotKey":"-5"},"key":"8"}],"methods":[],"events":[]}